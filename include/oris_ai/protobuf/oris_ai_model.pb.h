// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oris_ai_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oris_5fai_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oris_5fai_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oris_5fai_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oris_5fai_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oris_5fai_5fmodel_2eproto;
namespace oris_ai {
class QuantizedTorchActivation;
class QuantizedTorchActivationDefaultTypeInternal;
extern QuantizedTorchActivationDefaultTypeInternal _QuantizedTorchActivation_default_instance_;
class QuantizedTorchConv2d;
class QuantizedTorchConv2dDefaultTypeInternal;
extern QuantizedTorchConv2dDefaultTypeInternal _QuantizedTorchConv2d_default_instance_;
class TorchActivation;
class TorchActivationDefaultTypeInternal;
extern TorchActivationDefaultTypeInternal _TorchActivation_default_instance_;
class TorchBatchNorm2d;
class TorchBatchNorm2dDefaultTypeInternal;
extern TorchBatchNorm2dDefaultTypeInternal _TorchBatchNorm2d_default_instance_;
class TorchConcat;
class TorchConcatDefaultTypeInternal;
extern TorchConcatDefaultTypeInternal _TorchConcat_default_instance_;
class TorchConv2d;
class TorchConv2dDefaultTypeInternal;
extern TorchConv2dDefaultTypeInternal _TorchConv2d_default_instance_;
class TorchConvTranspose2d;
class TorchConvTranspose2dDefaultTypeInternal;
extern TorchConvTranspose2dDefaultTypeInternal _TorchConvTranspose2d_default_instance_;
class TorchLayer;
class TorchLayerDefaultTypeInternal;
extern TorchLayerDefaultTypeInternal _TorchLayer_default_instance_;
class TorchMaxPool2d;
class TorchMaxPool2dDefaultTypeInternal;
extern TorchMaxPool2dDefaultTypeInternal _TorchMaxPool2d_default_instance_;
class TorchModel;
class TorchModelDefaultTypeInternal;
extern TorchModelDefaultTypeInternal _TorchModel_default_instance_;
class TorchUpsample;
class TorchUpsampleDefaultTypeInternal;
extern TorchUpsampleDefaultTypeInternal _TorchUpsample_default_instance_;
}  // namespace oris_ai
PROTOBUF_NAMESPACE_OPEN
template<> ::oris_ai::QuantizedTorchActivation* Arena::CreateMaybeMessage<::oris_ai::QuantizedTorchActivation>(Arena*);
template<> ::oris_ai::QuantizedTorchConv2d* Arena::CreateMaybeMessage<::oris_ai::QuantizedTorchConv2d>(Arena*);
template<> ::oris_ai::TorchActivation* Arena::CreateMaybeMessage<::oris_ai::TorchActivation>(Arena*);
template<> ::oris_ai::TorchBatchNorm2d* Arena::CreateMaybeMessage<::oris_ai::TorchBatchNorm2d>(Arena*);
template<> ::oris_ai::TorchConcat* Arena::CreateMaybeMessage<::oris_ai::TorchConcat>(Arena*);
template<> ::oris_ai::TorchConv2d* Arena::CreateMaybeMessage<::oris_ai::TorchConv2d>(Arena*);
template<> ::oris_ai::TorchConvTranspose2d* Arena::CreateMaybeMessage<::oris_ai::TorchConvTranspose2d>(Arena*);
template<> ::oris_ai::TorchLayer* Arena::CreateMaybeMessage<::oris_ai::TorchLayer>(Arena*);
template<> ::oris_ai::TorchMaxPool2d* Arena::CreateMaybeMessage<::oris_ai::TorchMaxPool2d>(Arena*);
template<> ::oris_ai::TorchModel* Arena::CreateMaybeMessage<::oris_ai::TorchModel>(Arena*);
template<> ::oris_ai::TorchUpsample* Arena::CreateMaybeMessage<::oris_ai::TorchUpsample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oris_ai {

enum ActivationType : int {
  NONE = 0,
  ReLU = 1,
  ReLU6 = 2,
  SiLU = 3,
  HSwish = 4,
  ActivationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActivationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActivationType_IsValid(int value);
constexpr ActivationType ActivationType_MIN = NONE;
constexpr ActivationType ActivationType_MAX = HSwish;
constexpr int ActivationType_ARRAYSIZE = ActivationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivationType_descriptor();
template<typename T>
inline const std::string& ActivationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActivationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActivationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActivationType_descriptor(), enum_t_value);
}
inline bool ActivationType_Parse(
    const std::string& name, ActivationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActivationType>(
    ActivationType_descriptor(), name, value);
}
// ===================================================================

class TorchConv2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchConv2d) */ {
 public:
  inline TorchConv2d() : TorchConv2d(nullptr) {};
  virtual ~TorchConv2d();

  TorchConv2d(const TorchConv2d& from);
  TorchConv2d(TorchConv2d&& from) noexcept
    : TorchConv2d() {
    *this = ::std::move(from);
  }

  inline TorchConv2d& operator=(const TorchConv2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchConv2d& operator=(TorchConv2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchConv2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchConv2d* internal_default_instance() {
    return reinterpret_cast<const TorchConv2d*>(
               &_TorchConv2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TorchConv2d& a, TorchConv2d& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchConv2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchConv2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchConv2d* New() const final {
    return CreateMaybeMessage<TorchConv2d>(nullptr);
  }

  TorchConv2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchConv2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchConv2d& from);
  void MergeFrom(const TorchConv2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchConv2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchConv2d";
  }
  protected:
  explicit TorchConv2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 3,
    kStrideFieldNumber = 4,
    kPaddingFieldNumber = 5,
    kDilationFieldNumber = 6,
    kWeightFieldNumber = 9,
    kBiasFieldNumber = 10,
    kInChannelsFieldNumber = 1,
    kOutChannelsFieldNumber = 2,
    kGroupsFieldNumber = 7,
    kUseBiasFieldNumber = 8,
  };
  // repeated int32 kernel_size = 3;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;
  public:
  void clear_kernel_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kernel_size() const;
  void _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kernel_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size(int index) const;
  void set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kernel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kernel_size();

  // repeated int32 stride = 4;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stride();

  // repeated int32 padding = 5;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_padding() const;
  void _internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_padding();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 padding(int index) const;
  void set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_padding();

  // repeated int32 dilation = 6;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dilation() const;
  void _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dilation();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dilation(int index) const;
  void set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dilation();

  // repeated float weight = 9;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float bias = 10;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  float _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bias() const;
  void _internal_add_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bias();
  public:
  float bias(int index) const;
  void set_bias(int index, float value);
  void add_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bias();

  // int32 in_channels = 1;
  void clear_in_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels() const;
  void set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_channels() const;
  void _internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_channels = 2;
  void clear_out_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels() const;
  void set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_channels() const;
  void _internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groups = 7;
  void clear_groups();
  ::PROTOBUF_NAMESPACE_ID::int32 groups() const;
  void set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups() const;
  void _internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_bias = 8;
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchConv2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kernel_size_;
  mutable std::atomic<int> _kernel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > padding_;
  mutable std::atomic<int> _padding_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dilation_;
  mutable std::atomic<int> _dilation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
  mutable std::atomic<int> _weight_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bias_;
  mutable std::atomic<int> _bias_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 groups_;
  bool use_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchConvTranspose2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchConvTranspose2d) */ {
 public:
  inline TorchConvTranspose2d() : TorchConvTranspose2d(nullptr) {};
  virtual ~TorchConvTranspose2d();

  TorchConvTranspose2d(const TorchConvTranspose2d& from);
  TorchConvTranspose2d(TorchConvTranspose2d&& from) noexcept
    : TorchConvTranspose2d() {
    *this = ::std::move(from);
  }

  inline TorchConvTranspose2d& operator=(const TorchConvTranspose2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchConvTranspose2d& operator=(TorchConvTranspose2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchConvTranspose2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchConvTranspose2d* internal_default_instance() {
    return reinterpret_cast<const TorchConvTranspose2d*>(
               &_TorchConvTranspose2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TorchConvTranspose2d& a, TorchConvTranspose2d& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchConvTranspose2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchConvTranspose2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchConvTranspose2d* New() const final {
    return CreateMaybeMessage<TorchConvTranspose2d>(nullptr);
  }

  TorchConvTranspose2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchConvTranspose2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchConvTranspose2d& from);
  void MergeFrom(const TorchConvTranspose2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchConvTranspose2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchConvTranspose2d";
  }
  protected:
  explicit TorchConvTranspose2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 3,
    kStrideFieldNumber = 4,
    kPaddingFieldNumber = 5,
    kOutputPaddingFieldNumber = 6,
    kDilationFieldNumber = 7,
    kWeightFieldNumber = 10,
    kBiasFieldNumber = 11,
    kInChannelsFieldNumber = 1,
    kOutChannelsFieldNumber = 2,
    kGroupsFieldNumber = 8,
    kUseBiasFieldNumber = 9,
  };
  // repeated int32 kernel_size = 3;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;
  public:
  void clear_kernel_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kernel_size() const;
  void _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kernel_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size(int index) const;
  void set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kernel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kernel_size();

  // repeated int32 stride = 4;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stride();

  // repeated int32 padding = 5;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_padding() const;
  void _internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_padding();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 padding(int index) const;
  void set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_padding();

  // repeated int32 output_padding = 6;
  int output_padding_size() const;
  private:
  int _internal_output_padding_size() const;
  public:
  void clear_output_padding();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_output_padding() const;
  void _internal_add_output_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_output_padding();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 output_padding(int index) const;
  void set_output_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_output_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      output_padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_output_padding();

  // repeated int32 dilation = 7;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dilation() const;
  void _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dilation();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dilation(int index) const;
  void set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dilation();

  // repeated float weight = 10;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float bias = 11;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  float _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bias() const;
  void _internal_add_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bias();
  public:
  float bias(int index) const;
  void set_bias(int index, float value);
  void add_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bias();

  // int32 in_channels = 1;
  void clear_in_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels() const;
  void set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_channels() const;
  void _internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_channels = 2;
  void clear_out_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels() const;
  void set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_channels() const;
  void _internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groups = 8;
  void clear_groups();
  ::PROTOBUF_NAMESPACE_ID::int32 groups() const;
  void set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups() const;
  void _internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_bias = 9;
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchConvTranspose2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kernel_size_;
  mutable std::atomic<int> _kernel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > padding_;
  mutable std::atomic<int> _padding_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > output_padding_;
  mutable std::atomic<int> _output_padding_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dilation_;
  mutable std::atomic<int> _dilation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
  mutable std::atomic<int> _weight_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bias_;
  mutable std::atomic<int> _bias_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 groups_;
  bool use_bias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchBatchNorm2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchBatchNorm2d) */ {
 public:
  inline TorchBatchNorm2d() : TorchBatchNorm2d(nullptr) {};
  virtual ~TorchBatchNorm2d();

  TorchBatchNorm2d(const TorchBatchNorm2d& from);
  TorchBatchNorm2d(TorchBatchNorm2d&& from) noexcept
    : TorchBatchNorm2d() {
    *this = ::std::move(from);
  }

  inline TorchBatchNorm2d& operator=(const TorchBatchNorm2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchBatchNorm2d& operator=(TorchBatchNorm2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchBatchNorm2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchBatchNorm2d* internal_default_instance() {
    return reinterpret_cast<const TorchBatchNorm2d*>(
               &_TorchBatchNorm2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TorchBatchNorm2d& a, TorchBatchNorm2d& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchBatchNorm2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchBatchNorm2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchBatchNorm2d* New() const final {
    return CreateMaybeMessage<TorchBatchNorm2d>(nullptr);
  }

  TorchBatchNorm2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchBatchNorm2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchBatchNorm2d& from);
  void MergeFrom(const TorchBatchNorm2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchBatchNorm2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchBatchNorm2d";
  }
  protected:
  explicit TorchBatchNorm2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 3,
    kBiasFieldNumber = 4,
    kRunningMeanFieldNumber = 5,
    kRunningVarFieldNumber = 6,
    kNumFeaturesFieldNumber = 1,
    kAffineFieldNumber = 2,
  };
  // repeated float weight = 3;
  int weight_size() const;
  private:
  int _internal_weight_size() const;
  public:
  void clear_weight();
  private:
  float _internal_weight(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weight() const;
  void _internal_add_weight(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weight();
  public:
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weight() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weight();

  // repeated float bias = 4;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  float _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bias() const;
  void _internal_add_bias(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bias();
  public:
  float bias(int index) const;
  void set_bias(int index, float value);
  void add_bias(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bias();

  // repeated float running_mean = 5;
  int running_mean_size() const;
  private:
  int _internal_running_mean_size() const;
  public:
  void clear_running_mean();
  private:
  float _internal_running_mean(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_running_mean() const;
  void _internal_add_running_mean(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_running_mean();
  public:
  float running_mean(int index) const;
  void set_running_mean(int index, float value);
  void add_running_mean(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      running_mean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_running_mean();

  // repeated float running_var = 6;
  int running_var_size() const;
  private:
  int _internal_running_var_size() const;
  public:
  void clear_running_var();
  private:
  float _internal_running_var(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_running_var() const;
  void _internal_add_running_var(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_running_var();
  public:
  float running_var(int index) const;
  void set_running_var(int index, float value);
  void add_running_var(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      running_var() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_running_var();

  // int32 num_features = 1;
  void clear_num_features();
  ::PROTOBUF_NAMESPACE_ID::int32 num_features() const;
  void set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_features() const;
  void _internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool affine = 2;
  void clear_affine();
  bool affine() const;
  void set_affine(bool value);
  private:
  bool _internal_affine() const;
  void _internal_set_affine(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchBatchNorm2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weight_;
  mutable std::atomic<int> _weight_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bias_;
  mutable std::atomic<int> _bias_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > running_mean_;
  mutable std::atomic<int> _running_mean_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > running_var_;
  mutable std::atomic<int> _running_var_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_features_;
  bool affine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchActivation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchActivation) */ {
 public:
  inline TorchActivation() : TorchActivation(nullptr) {};
  virtual ~TorchActivation();

  TorchActivation(const TorchActivation& from);
  TorchActivation(TorchActivation&& from) noexcept
    : TorchActivation() {
    *this = ::std::move(from);
  }

  inline TorchActivation& operator=(const TorchActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchActivation& operator=(TorchActivation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchActivation* internal_default_instance() {
    return reinterpret_cast<const TorchActivation*>(
               &_TorchActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TorchActivation& a, TorchActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchActivation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchActivation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchActivation* New() const final {
    return CreateMaybeMessage<TorchActivation>(nullptr);
  }

  TorchActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchActivation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchActivation& from);
  void MergeFrom(const TorchActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchActivation";
  }
  protected:
  explicit TorchActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .oris_ai.ActivationType type = 1;
  void clear_type();
  ::oris_ai::ActivationType type() const;
  void set_type(::oris_ai::ActivationType value);
  private:
  ::oris_ai::ActivationType _internal_type() const;
  void _internal_set_type(::oris_ai::ActivationType value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchActivation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchMaxPool2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchMaxPool2d) */ {
 public:
  inline TorchMaxPool2d() : TorchMaxPool2d(nullptr) {};
  virtual ~TorchMaxPool2d();

  TorchMaxPool2d(const TorchMaxPool2d& from);
  TorchMaxPool2d(TorchMaxPool2d&& from) noexcept
    : TorchMaxPool2d() {
    *this = ::std::move(from);
  }

  inline TorchMaxPool2d& operator=(const TorchMaxPool2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchMaxPool2d& operator=(TorchMaxPool2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchMaxPool2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchMaxPool2d* internal_default_instance() {
    return reinterpret_cast<const TorchMaxPool2d*>(
               &_TorchMaxPool2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TorchMaxPool2d& a, TorchMaxPool2d& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchMaxPool2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchMaxPool2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchMaxPool2d* New() const final {
    return CreateMaybeMessage<TorchMaxPool2d>(nullptr);
  }

  TorchMaxPool2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchMaxPool2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchMaxPool2d& from);
  void MergeFrom(const TorchMaxPool2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchMaxPool2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchMaxPool2d";
  }
  protected:
  explicit TorchMaxPool2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kDilationFieldNumber = 4,
    kCeilModeFieldNumber = 5,
  };
  // int32 kernel_size = 1;
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stride = 2;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 padding = 3;
  void clear_padding();
  ::PROTOBUF_NAMESPACE_ID::int32 padding() const;
  void set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding() const;
  void _internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dilation = 4;
  void clear_dilation();
  ::PROTOBUF_NAMESPACE_ID::int32 dilation() const;
  void set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation() const;
  void _internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ceil_mode = 5;
  void clear_ceil_mode();
  bool ceil_mode() const;
  void set_ceil_mode(bool value);
  private:
  bool _internal_ceil_mode() const;
  void _internal_set_ceil_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchMaxPool2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_;
  ::PROTOBUF_NAMESPACE_ID::int32 dilation_;
  bool ceil_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchConcat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchConcat) */ {
 public:
  inline TorchConcat() : TorchConcat(nullptr) {};
  virtual ~TorchConcat();

  TorchConcat(const TorchConcat& from);
  TorchConcat(TorchConcat&& from) noexcept
    : TorchConcat() {
    *this = ::std::move(from);
  }

  inline TorchConcat& operator=(const TorchConcat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchConcat& operator=(TorchConcat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchConcat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchConcat* internal_default_instance() {
    return reinterpret_cast<const TorchConcat*>(
               &_TorchConcat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TorchConcat& a, TorchConcat& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchConcat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchConcat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchConcat* New() const final {
    return CreateMaybeMessage<TorchConcat>(nullptr);
  }

  TorchConcat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchConcat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchConcat& from);
  void MergeFrom(const TorchConcat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchConcat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchConcat";
  }
  protected:
  explicit TorchConcat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
  };
  // int32 dimension = 1;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::int32 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchConcat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchUpsample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchUpsample) */ {
 public:
  inline TorchUpsample() : TorchUpsample(nullptr) {};
  virtual ~TorchUpsample();

  TorchUpsample(const TorchUpsample& from);
  TorchUpsample(TorchUpsample&& from) noexcept
    : TorchUpsample() {
    *this = ::std::move(from);
  }

  inline TorchUpsample& operator=(const TorchUpsample& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchUpsample& operator=(TorchUpsample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchUpsample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchUpsample* internal_default_instance() {
    return reinterpret_cast<const TorchUpsample*>(
               &_TorchUpsample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TorchUpsample& a, TorchUpsample& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchUpsample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchUpsample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchUpsample* New() const final {
    return CreateMaybeMessage<TorchUpsample>(nullptr);
  }

  TorchUpsample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchUpsample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchUpsample& from);
  void MergeFrom(const TorchUpsample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchUpsample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchUpsample";
  }
  protected:
  explicit TorchUpsample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kScaleFactorFieldNumber = 2,
  };
  // string mode = 1;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mode(
      std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // float scale_factor = 2;
  void clear_scale_factor();
  float scale_factor() const;
  void set_scale_factor(float value);
  private:
  float _internal_scale_factor() const;
  void _internal_set_scale_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.TorchUpsample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  float scale_factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class QuantizedTorchConv2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.QuantizedTorchConv2d) */ {
 public:
  inline QuantizedTorchConv2d() : QuantizedTorchConv2d(nullptr) {};
  virtual ~QuantizedTorchConv2d();

  QuantizedTorchConv2d(const QuantizedTorchConv2d& from);
  QuantizedTorchConv2d(QuantizedTorchConv2d&& from) noexcept
    : QuantizedTorchConv2d() {
    *this = ::std::move(from);
  }

  inline QuantizedTorchConv2d& operator=(const QuantizedTorchConv2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizedTorchConv2d& operator=(QuantizedTorchConv2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantizedTorchConv2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizedTorchConv2d* internal_default_instance() {
    return reinterpret_cast<const QuantizedTorchConv2d*>(
               &_QuantizedTorchConv2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuantizedTorchConv2d& a, QuantizedTorchConv2d& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizedTorchConv2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizedTorchConv2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizedTorchConv2d* New() const final {
    return CreateMaybeMessage<QuantizedTorchConv2d>(nullptr);
  }

  QuantizedTorchConv2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizedTorchConv2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantizedTorchConv2d& from);
  void MergeFrom(const QuantizedTorchConv2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizedTorchConv2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.QuantizedTorchConv2d";
  }
  protected:
  explicit QuantizedTorchConv2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 3,
    kStrideFieldNumber = 4,
    kPaddingFieldNumber = 5,
    kDilationFieldNumber = 6,
    kBiasFieldNumber = 10,
    kWeightFieldNumber = 9,
    kInChannelsFieldNumber = 1,
    kOutChannelsFieldNumber = 2,
    kGroupsFieldNumber = 7,
    kUseBiasFieldNumber = 8,
    kWeightScaleFieldNumber = 11,
    kInputScaleFieldNumber = 12,
    kOutputScaleFieldNumber = 13,
  };
  // repeated int32 kernel_size = 3;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;
  public:
  void clear_kernel_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kernel_size() const;
  void _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kernel_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size(int index) const;
  void set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kernel_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kernel_size();

  // repeated int32 stride = 4;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stride() const;
  void _internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stride();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stride(int index) const;
  void set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stride();

  // repeated int32 padding = 5;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_padding() const;
  void _internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_padding();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 padding(int index) const;
  void set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_padding(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_padding();

  // repeated int32 dilation = 6;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dilation() const;
  void _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dilation();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dilation(int index) const;
  void set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dilation();

  // repeated int32 bias = 10;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bias() const;
  void _internal_add_bias(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bias();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bias(int index) const;
  void set_bias(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bias(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bias();

  // bytes weight = 9;
  void clear_weight();
  const std::string& weight() const;
  void set_weight(const std::string& value);
  void set_weight(std::string&& value);
  void set_weight(const char* value);
  void set_weight(const void* value, size_t size);
  std::string* mutable_weight();
  std::string* release_weight();
  void set_allocated_weight(std::string* weight);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_weight();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_weight(
      std::string* weight);
  private:
  const std::string& _internal_weight() const;
  void _internal_set_weight(const std::string& value);
  std::string* _internal_mutable_weight();
  public:

  // int32 in_channels = 1;
  void clear_in_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels() const;
  void set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_channels() const;
  void _internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_channels = 2;
  void clear_out_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels() const;
  void set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_channels() const;
  void _internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groups = 7;
  void clear_groups();
  ::PROTOBUF_NAMESPACE_ID::int32 groups() const;
  void set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groups() const;
  void _internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_bias = 8;
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // float weight_scale = 11;
  void clear_weight_scale();
  float weight_scale() const;
  void set_weight_scale(float value);
  private:
  float _internal_weight_scale() const;
  void _internal_set_weight_scale(float value);
  public:

  // float input_scale = 12;
  void clear_input_scale();
  float input_scale() const;
  void set_input_scale(float value);
  private:
  float _internal_input_scale() const;
  void _internal_set_input_scale(float value);
  public:

  // float output_scale = 13;
  void clear_output_scale();
  float output_scale() const;
  void set_output_scale(float value);
  private:
  float _internal_output_scale() const;
  void _internal_set_output_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.QuantizedTorchConv2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kernel_size_;
  mutable std::atomic<int> _kernel_size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stride_;
  mutable std::atomic<int> _stride_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > padding_;
  mutable std::atomic<int> _padding_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dilation_;
  mutable std::atomic<int> _dilation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bias_;
  mutable std::atomic<int> _bias_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 groups_;
  bool use_bias_;
  float weight_scale_;
  float input_scale_;
  float output_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class QuantizedTorchActivation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.QuantizedTorchActivation) */ {
 public:
  inline QuantizedTorchActivation() : QuantizedTorchActivation(nullptr) {};
  virtual ~QuantizedTorchActivation();

  QuantizedTorchActivation(const QuantizedTorchActivation& from);
  QuantizedTorchActivation(QuantizedTorchActivation&& from) noexcept
    : QuantizedTorchActivation() {
    *this = ::std::move(from);
  }

  inline QuantizedTorchActivation& operator=(const QuantizedTorchActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizedTorchActivation& operator=(QuantizedTorchActivation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantizedTorchActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizedTorchActivation* internal_default_instance() {
    return reinterpret_cast<const QuantizedTorchActivation*>(
               &_QuantizedTorchActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuantizedTorchActivation& a, QuantizedTorchActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizedTorchActivation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizedTorchActivation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizedTorchActivation* New() const final {
    return CreateMaybeMessage<QuantizedTorchActivation>(nullptr);
  }

  QuantizedTorchActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizedTorchActivation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantizedTorchActivation& from);
  void MergeFrom(const QuantizedTorchActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizedTorchActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.QuantizedTorchActivation";
  }
  protected:
  explicit QuantizedTorchActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInputScaleFieldNumber = 2,
    kOutputScaleFieldNumber = 3,
  };
  // .oris_ai.ActivationType type = 1;
  void clear_type();
  ::oris_ai::ActivationType type() const;
  void set_type(::oris_ai::ActivationType value);
  private:
  ::oris_ai::ActivationType _internal_type() const;
  void _internal_set_type(::oris_ai::ActivationType value);
  public:

  // float input_scale = 2;
  void clear_input_scale();
  float input_scale() const;
  void set_input_scale(float value);
  private:
  float _internal_input_scale() const;
  void _internal_set_input_scale(float value);
  public:

  // float output_scale = 3;
  void clear_output_scale();
  float output_scale() const;
  void set_output_scale(float value);
  private:
  float _internal_output_scale() const;
  void _internal_set_output_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:oris_ai.QuantizedTorchActivation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  float input_scale_;
  float output_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchLayer) */ {
 public:
  inline TorchLayer() : TorchLayer(nullptr) {};
  virtual ~TorchLayer();

  TorchLayer(const TorchLayer& from);
  TorchLayer(TorchLayer&& from) noexcept
    : TorchLayer() {
    *this = ::std::move(from);
  }

  inline TorchLayer& operator=(const TorchLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchLayer& operator=(TorchLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchLayer& default_instance();

  enum LayerTypeCase {
    kConv2D = 2,
    kConvtranspose2D = 3,
    kBatchnorm2D = 4,
    kActivation = 5,
    kMaxpool2D = 6,
    kConcat = 7,
    kUpsample = 8,
    kQuantizedConv2D = 9,
    kQuantizedActivation = 10,
    LAYER_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchLayer* internal_default_instance() {
    return reinterpret_cast<const TorchLayer*>(
               &_TorchLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TorchLayer& a, TorchLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchLayer* New() const final {
    return CreateMaybeMessage<TorchLayer>(nullptr);
  }

  TorchLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchLayer& from);
  void MergeFrom(const TorchLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchLayer";
  }
  protected:
  explicit TorchLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConv2DFieldNumber = 2,
    kConvtranspose2DFieldNumber = 3,
    kBatchnorm2DFieldNumber = 4,
    kActivationFieldNumber = 5,
    kMaxpool2DFieldNumber = 6,
    kConcatFieldNumber = 7,
    kUpsampleFieldNumber = 8,
    kQuantizedConv2DFieldNumber = 9,
    kQuantizedActivationFieldNumber = 10,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .oris_ai.TorchConv2d conv2d = 2;
  bool has_conv2d() const;
  private:
  bool _internal_has_conv2d() const;
  public:
  void clear_conv2d();
  const ::oris_ai::TorchConv2d& conv2d() const;
  ::oris_ai::TorchConv2d* release_conv2d();
  ::oris_ai::TorchConv2d* mutable_conv2d();
  void set_allocated_conv2d(::oris_ai::TorchConv2d* conv2d);
  private:
  const ::oris_ai::TorchConv2d& _internal_conv2d() const;
  ::oris_ai::TorchConv2d* _internal_mutable_conv2d();
  public:
  void unsafe_arena_set_allocated_conv2d(
      ::oris_ai::TorchConv2d* conv2d);
  ::oris_ai::TorchConv2d* unsafe_arena_release_conv2d();

  // .oris_ai.TorchConvTranspose2d convtranspose2d = 3;
  bool has_convtranspose2d() const;
  private:
  bool _internal_has_convtranspose2d() const;
  public:
  void clear_convtranspose2d();
  const ::oris_ai::TorchConvTranspose2d& convtranspose2d() const;
  ::oris_ai::TorchConvTranspose2d* release_convtranspose2d();
  ::oris_ai::TorchConvTranspose2d* mutable_convtranspose2d();
  void set_allocated_convtranspose2d(::oris_ai::TorchConvTranspose2d* convtranspose2d);
  private:
  const ::oris_ai::TorchConvTranspose2d& _internal_convtranspose2d() const;
  ::oris_ai::TorchConvTranspose2d* _internal_mutable_convtranspose2d();
  public:
  void unsafe_arena_set_allocated_convtranspose2d(
      ::oris_ai::TorchConvTranspose2d* convtranspose2d);
  ::oris_ai::TorchConvTranspose2d* unsafe_arena_release_convtranspose2d();

  // .oris_ai.TorchBatchNorm2d batchnorm2d = 4;
  bool has_batchnorm2d() const;
  private:
  bool _internal_has_batchnorm2d() const;
  public:
  void clear_batchnorm2d();
  const ::oris_ai::TorchBatchNorm2d& batchnorm2d() const;
  ::oris_ai::TorchBatchNorm2d* release_batchnorm2d();
  ::oris_ai::TorchBatchNorm2d* mutable_batchnorm2d();
  void set_allocated_batchnorm2d(::oris_ai::TorchBatchNorm2d* batchnorm2d);
  private:
  const ::oris_ai::TorchBatchNorm2d& _internal_batchnorm2d() const;
  ::oris_ai::TorchBatchNorm2d* _internal_mutable_batchnorm2d();
  public:
  void unsafe_arena_set_allocated_batchnorm2d(
      ::oris_ai::TorchBatchNorm2d* batchnorm2d);
  ::oris_ai::TorchBatchNorm2d* unsafe_arena_release_batchnorm2d();

  // .oris_ai.TorchActivation activation = 5;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const ::oris_ai::TorchActivation& activation() const;
  ::oris_ai::TorchActivation* release_activation();
  ::oris_ai::TorchActivation* mutable_activation();
  void set_allocated_activation(::oris_ai::TorchActivation* activation);
  private:
  const ::oris_ai::TorchActivation& _internal_activation() const;
  ::oris_ai::TorchActivation* _internal_mutable_activation();
  public:
  void unsafe_arena_set_allocated_activation(
      ::oris_ai::TorchActivation* activation);
  ::oris_ai::TorchActivation* unsafe_arena_release_activation();

  // .oris_ai.TorchMaxPool2d maxpool2d = 6;
  bool has_maxpool2d() const;
  private:
  bool _internal_has_maxpool2d() const;
  public:
  void clear_maxpool2d();
  const ::oris_ai::TorchMaxPool2d& maxpool2d() const;
  ::oris_ai::TorchMaxPool2d* release_maxpool2d();
  ::oris_ai::TorchMaxPool2d* mutable_maxpool2d();
  void set_allocated_maxpool2d(::oris_ai::TorchMaxPool2d* maxpool2d);
  private:
  const ::oris_ai::TorchMaxPool2d& _internal_maxpool2d() const;
  ::oris_ai::TorchMaxPool2d* _internal_mutable_maxpool2d();
  public:
  void unsafe_arena_set_allocated_maxpool2d(
      ::oris_ai::TorchMaxPool2d* maxpool2d);
  ::oris_ai::TorchMaxPool2d* unsafe_arena_release_maxpool2d();

  // .oris_ai.TorchConcat concat = 7;
  bool has_concat() const;
  private:
  bool _internal_has_concat() const;
  public:
  void clear_concat();
  const ::oris_ai::TorchConcat& concat() const;
  ::oris_ai::TorchConcat* release_concat();
  ::oris_ai::TorchConcat* mutable_concat();
  void set_allocated_concat(::oris_ai::TorchConcat* concat);
  private:
  const ::oris_ai::TorchConcat& _internal_concat() const;
  ::oris_ai::TorchConcat* _internal_mutable_concat();
  public:
  void unsafe_arena_set_allocated_concat(
      ::oris_ai::TorchConcat* concat);
  ::oris_ai::TorchConcat* unsafe_arena_release_concat();

  // .oris_ai.TorchUpsample upsample = 8;
  bool has_upsample() const;
  private:
  bool _internal_has_upsample() const;
  public:
  void clear_upsample();
  const ::oris_ai::TorchUpsample& upsample() const;
  ::oris_ai::TorchUpsample* release_upsample();
  ::oris_ai::TorchUpsample* mutable_upsample();
  void set_allocated_upsample(::oris_ai::TorchUpsample* upsample);
  private:
  const ::oris_ai::TorchUpsample& _internal_upsample() const;
  ::oris_ai::TorchUpsample* _internal_mutable_upsample();
  public:
  void unsafe_arena_set_allocated_upsample(
      ::oris_ai::TorchUpsample* upsample);
  ::oris_ai::TorchUpsample* unsafe_arena_release_upsample();

  // .oris_ai.QuantizedTorchConv2d quantized_conv2d = 9;
  bool has_quantized_conv2d() const;
  private:
  bool _internal_has_quantized_conv2d() const;
  public:
  void clear_quantized_conv2d();
  const ::oris_ai::QuantizedTorchConv2d& quantized_conv2d() const;
  ::oris_ai::QuantizedTorchConv2d* release_quantized_conv2d();
  ::oris_ai::QuantizedTorchConv2d* mutable_quantized_conv2d();
  void set_allocated_quantized_conv2d(::oris_ai::QuantizedTorchConv2d* quantized_conv2d);
  private:
  const ::oris_ai::QuantizedTorchConv2d& _internal_quantized_conv2d() const;
  ::oris_ai::QuantizedTorchConv2d* _internal_mutable_quantized_conv2d();
  public:
  void unsafe_arena_set_allocated_quantized_conv2d(
      ::oris_ai::QuantizedTorchConv2d* quantized_conv2d);
  ::oris_ai::QuantizedTorchConv2d* unsafe_arena_release_quantized_conv2d();

  // .oris_ai.QuantizedTorchActivation quantized_activation = 10;
  bool has_quantized_activation() const;
  private:
  bool _internal_has_quantized_activation() const;
  public:
  void clear_quantized_activation();
  const ::oris_ai::QuantizedTorchActivation& quantized_activation() const;
  ::oris_ai::QuantizedTorchActivation* release_quantized_activation();
  ::oris_ai::QuantizedTorchActivation* mutable_quantized_activation();
  void set_allocated_quantized_activation(::oris_ai::QuantizedTorchActivation* quantized_activation);
  private:
  const ::oris_ai::QuantizedTorchActivation& _internal_quantized_activation() const;
  ::oris_ai::QuantizedTorchActivation* _internal_mutable_quantized_activation();
  public:
  void unsafe_arena_set_allocated_quantized_activation(
      ::oris_ai::QuantizedTorchActivation* quantized_activation);
  ::oris_ai::QuantizedTorchActivation* unsafe_arena_release_quantized_activation();

  void clear_layer_type();
  LayerTypeCase layer_type_case() const;
  // @@protoc_insertion_point(class_scope:oris_ai.TorchLayer)
 private:
  class _Internal;
  void set_has_conv2d();
  void set_has_convtranspose2d();
  void set_has_batchnorm2d();
  void set_has_activation();
  void set_has_maxpool2d();
  void set_has_concat();
  void set_has_upsample();
  void set_has_quantized_conv2d();
  void set_has_quantized_activation();

  inline bool has_layer_type() const;
  inline void clear_has_layer_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union LayerTypeUnion {
    LayerTypeUnion() {}
    ::oris_ai::TorchConv2d* conv2d_;
    ::oris_ai::TorchConvTranspose2d* convtranspose2d_;
    ::oris_ai::TorchBatchNorm2d* batchnorm2d_;
    ::oris_ai::TorchActivation* activation_;
    ::oris_ai::TorchMaxPool2d* maxpool2d_;
    ::oris_ai::TorchConcat* concat_;
    ::oris_ai::TorchUpsample* upsample_;
    ::oris_ai::QuantizedTorchConv2d* quantized_conv2d_;
    ::oris_ai::QuantizedTorchActivation* quantized_activation_;
  } layer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class TorchModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oris_ai.TorchModel) */ {
 public:
  inline TorchModel() : TorchModel(nullptr) {};
  virtual ~TorchModel();

  TorchModel(const TorchModel& from);
  TorchModel(TorchModel&& from) noexcept
    : TorchModel() {
    *this = ::std::move(from);
  }

  inline TorchModel& operator=(const TorchModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TorchModel& operator=(TorchModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TorchModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TorchModel* internal_default_instance() {
    return reinterpret_cast<const TorchModel*>(
               &_TorchModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TorchModel& a, TorchModel& b) {
    a.Swap(&b);
  }
  inline void Swap(TorchModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TorchModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TorchModel* New() const final {
    return CreateMaybeMessage<TorchModel>(nullptr);
  }

  TorchModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TorchModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TorchModel& from);
  void MergeFrom(const TorchModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TorchModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oris_ai.TorchModel";
  }
  protected:
  explicit TorchModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oris_5fai_5fmodel_2eproto);
    return ::descriptor_table_oris_5fai_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .oris_ai.TorchLayer layers = 1;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::oris_ai::TorchLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oris_ai::TorchLayer >*
      mutable_layers();
  private:
  const ::oris_ai::TorchLayer& _internal_layers(int index) const;
  ::oris_ai::TorchLayer* _internal_add_layers();
  public:
  const ::oris_ai::TorchLayer& layers(int index) const;
  ::oris_ai::TorchLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oris_ai::TorchLayer >&
      layers() const;

  // @@protoc_insertion_point(class_scope:oris_ai.TorchModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oris_ai::TorchLayer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oris_5fai_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TorchConv2d

// int32 in_channels = 1;
inline void TorchConv2d::clear_in_channels() {
  in_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_in_channels() const {
  return in_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::in_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.in_channels)
  return _internal_in_channels();
}
inline void TorchConv2d::_internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_channels_ = value;
}
inline void TorchConv2d::set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.in_channels)
}

// int32 out_channels = 2;
inline void TorchConv2d::clear_out_channels() {
  out_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_out_channels() const {
  return out_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::out_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.out_channels)
  return _internal_out_channels();
}
inline void TorchConv2d::_internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_channels_ = value;
}
inline void TorchConv2d::set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.out_channels)
}

// repeated int32 kernel_size = 3;
inline int TorchConv2d::_internal_kernel_size_size() const {
  return kernel_size_.size();
}
inline int TorchConv2d::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void TorchConv2d::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_kernel_size(int index) const {
  return kernel_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.kernel_size)
  return _internal_kernel_size(index);
}
inline void TorchConv2d::set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.kernel_size)
}
inline void TorchConv2d::_internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Add(value);
}
inline void TorchConv2d::add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kernel_size(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.kernel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::_internal_kernel_size() const {
  return kernel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::kernel_size() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.kernel_size)
  return _internal_kernel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::_internal_mutable_kernel_size() {
  return &kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.kernel_size)
  return _internal_mutable_kernel_size();
}

// repeated int32 stride = 4;
inline int TorchConv2d::_internal_stride_size() const {
  return stride_.size();
}
inline int TorchConv2d::stride_size() const {
  return _internal_stride_size();
}
inline void TorchConv2d::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::stride(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.stride)
  return _internal_stride(index);
}
inline void TorchConv2d::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.stride)
}
inline void TorchConv2d::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Add(value);
}
inline void TorchConv2d::add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::stride() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.stride)
  return _internal_mutable_stride();
}

// repeated int32 padding = 5;
inline int TorchConv2d::_internal_padding_size() const {
  return padding_.size();
}
inline int TorchConv2d::padding_size() const {
  return _internal_padding_size();
}
inline void TorchConv2d::clear_padding() {
  padding_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_padding(int index) const {
  return padding_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::padding(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.padding)
  return _internal_padding(index);
}
inline void TorchConv2d::set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.padding)
}
inline void TorchConv2d::_internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Add(value);
}
inline void TorchConv2d::add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::_internal_padding() const {
  return padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::padding() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::_internal_mutable_padding() {
  return &padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.padding)
  return _internal_mutable_padding();
}

// repeated int32 dilation = 6;
inline int TorchConv2d::_internal_dilation_size() const {
  return dilation_.size();
}
inline int TorchConv2d::dilation_size() const {
  return _internal_dilation_size();
}
inline void TorchConv2d::clear_dilation() {
  dilation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_dilation(int index) const {
  return dilation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::dilation(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.dilation)
  return _internal_dilation(index);
}
inline void TorchConv2d::set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.dilation)
}
inline void TorchConv2d::_internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Add(value);
}
inline void TorchConv2d::add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::_internal_dilation() const {
  return dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConv2d::dilation() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::_internal_mutable_dilation() {
  return &dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConv2d::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.dilation)
  return _internal_mutable_dilation();
}

// int32 groups = 7;
inline void TorchConv2d::clear_groups() {
  groups_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::_internal_groups() const {
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConv2d::groups() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.groups)
  return _internal_groups();
}
inline void TorchConv2d::_internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groups_ = value;
}
inline void TorchConv2d::set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groups(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.groups)
}

// bool use_bias = 8;
inline void TorchConv2d::clear_use_bias() {
  use_bias_ = false;
}
inline bool TorchConv2d::_internal_use_bias() const {
  return use_bias_;
}
inline bool TorchConv2d::use_bias() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.use_bias)
  return _internal_use_bias();
}
inline void TorchConv2d::_internal_set_use_bias(bool value) {
  
  use_bias_ = value;
}
inline void TorchConv2d::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.use_bias)
}

// repeated float weight = 9;
inline int TorchConv2d::_internal_weight_size() const {
  return weight_.size();
}
inline int TorchConv2d::weight_size() const {
  return _internal_weight_size();
}
inline void TorchConv2d::clear_weight() {
  weight_.Clear();
}
inline float TorchConv2d::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline float TorchConv2d::weight(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.weight)
  return _internal_weight(index);
}
inline void TorchConv2d::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.weight)
}
inline void TorchConv2d::_internal_add_weight(float value) {
  weight_.Add(value);
}
inline void TorchConv2d::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConv2d::_internal_weight() const {
  return weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConv2d::weight() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConv2d::_internal_mutable_weight() {
  return &weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConv2d::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.weight)
  return _internal_mutable_weight();
}

// repeated float bias = 10;
inline int TorchConv2d::_internal_bias_size() const {
  return bias_.size();
}
inline int TorchConv2d::bias_size() const {
  return _internal_bias_size();
}
inline void TorchConv2d::clear_bias() {
  bias_.Clear();
}
inline float TorchConv2d::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline float TorchConv2d::bias(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConv2d.bias)
  return _internal_bias(index);
}
inline void TorchConv2d::set_bias(int index, float value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConv2d.bias)
}
inline void TorchConv2d::_internal_add_bias(float value) {
  bias_.Add(value);
}
inline void TorchConv2d::add_bias(float value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConv2d.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConv2d::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConv2d::bias() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConv2d.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConv2d::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConv2d::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConv2d.bias)
  return _internal_mutable_bias();
}

// -------------------------------------------------------------------

// TorchConvTranspose2d

// int32 in_channels = 1;
inline void TorchConvTranspose2d::clear_in_channels() {
  in_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_in_channels() const {
  return in_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::in_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.in_channels)
  return _internal_in_channels();
}
inline void TorchConvTranspose2d::_internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_channels_ = value;
}
inline void TorchConvTranspose2d::set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.in_channels)
}

// int32 out_channels = 2;
inline void TorchConvTranspose2d::clear_out_channels() {
  out_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_out_channels() const {
  return out_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::out_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.out_channels)
  return _internal_out_channels();
}
inline void TorchConvTranspose2d::_internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_channels_ = value;
}
inline void TorchConvTranspose2d::set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.out_channels)
}

// repeated int32 kernel_size = 3;
inline int TorchConvTranspose2d::_internal_kernel_size_size() const {
  return kernel_size_.size();
}
inline int TorchConvTranspose2d::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void TorchConvTranspose2d::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_kernel_size(int index) const {
  return kernel_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.kernel_size)
  return _internal_kernel_size(index);
}
inline void TorchConvTranspose2d::set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.kernel_size)
}
inline void TorchConvTranspose2d::_internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Add(value);
}
inline void TorchConvTranspose2d::add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kernel_size(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.kernel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::_internal_kernel_size() const {
  return kernel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::kernel_size() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.kernel_size)
  return _internal_kernel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::_internal_mutable_kernel_size() {
  return &kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.kernel_size)
  return _internal_mutable_kernel_size();
}

// repeated int32 stride = 4;
inline int TorchConvTranspose2d::_internal_stride_size() const {
  return stride_.size();
}
inline int TorchConvTranspose2d::stride_size() const {
  return _internal_stride_size();
}
inline void TorchConvTranspose2d::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::stride(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.stride)
  return _internal_stride(index);
}
inline void TorchConvTranspose2d::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.stride)
}
inline void TorchConvTranspose2d::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Add(value);
}
inline void TorchConvTranspose2d::add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::stride() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.stride)
  return _internal_mutable_stride();
}

// repeated int32 padding = 5;
inline int TorchConvTranspose2d::_internal_padding_size() const {
  return padding_.size();
}
inline int TorchConvTranspose2d::padding_size() const {
  return _internal_padding_size();
}
inline void TorchConvTranspose2d::clear_padding() {
  padding_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_padding(int index) const {
  return padding_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::padding(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.padding)
  return _internal_padding(index);
}
inline void TorchConvTranspose2d::set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.padding)
}
inline void TorchConvTranspose2d::_internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Add(value);
}
inline void TorchConvTranspose2d::add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::_internal_padding() const {
  return padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::padding() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::_internal_mutable_padding() {
  return &padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.padding)
  return _internal_mutable_padding();
}

// repeated int32 output_padding = 6;
inline int TorchConvTranspose2d::_internal_output_padding_size() const {
  return output_padding_.size();
}
inline int TorchConvTranspose2d::output_padding_size() const {
  return _internal_output_padding_size();
}
inline void TorchConvTranspose2d::clear_output_padding() {
  output_padding_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_output_padding(int index) const {
  return output_padding_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::output_padding(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.output_padding)
  return _internal_output_padding(index);
}
inline void TorchConvTranspose2d::set_output_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.output_padding)
}
inline void TorchConvTranspose2d::_internal_add_output_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  output_padding_.Add(value);
}
inline void TorchConvTranspose2d::add_output_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_output_padding(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.output_padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::_internal_output_padding() const {
  return output_padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::output_padding() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.output_padding)
  return _internal_output_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::_internal_mutable_output_padding() {
  return &output_padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::mutable_output_padding() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.output_padding)
  return _internal_mutable_output_padding();
}

// repeated int32 dilation = 7;
inline int TorchConvTranspose2d::_internal_dilation_size() const {
  return dilation_.size();
}
inline int TorchConvTranspose2d::dilation_size() const {
  return _internal_dilation_size();
}
inline void TorchConvTranspose2d::clear_dilation() {
  dilation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_dilation(int index) const {
  return dilation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::dilation(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.dilation)
  return _internal_dilation(index);
}
inline void TorchConvTranspose2d::set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.dilation)
}
inline void TorchConvTranspose2d::_internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Add(value);
}
inline void TorchConvTranspose2d::add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::_internal_dilation() const {
  return dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TorchConvTranspose2d::dilation() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::_internal_mutable_dilation() {
  return &dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TorchConvTranspose2d::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.dilation)
  return _internal_mutable_dilation();
}

// int32 groups = 8;
inline void TorchConvTranspose2d::clear_groups() {
  groups_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::_internal_groups() const {
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConvTranspose2d::groups() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.groups)
  return _internal_groups();
}
inline void TorchConvTranspose2d::_internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groups_ = value;
}
inline void TorchConvTranspose2d::set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groups(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.groups)
}

// bool use_bias = 9;
inline void TorchConvTranspose2d::clear_use_bias() {
  use_bias_ = false;
}
inline bool TorchConvTranspose2d::_internal_use_bias() const {
  return use_bias_;
}
inline bool TorchConvTranspose2d::use_bias() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.use_bias)
  return _internal_use_bias();
}
inline void TorchConvTranspose2d::_internal_set_use_bias(bool value) {
  
  use_bias_ = value;
}
inline void TorchConvTranspose2d::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.use_bias)
}

// repeated float weight = 10;
inline int TorchConvTranspose2d::_internal_weight_size() const {
  return weight_.size();
}
inline int TorchConvTranspose2d::weight_size() const {
  return _internal_weight_size();
}
inline void TorchConvTranspose2d::clear_weight() {
  weight_.Clear();
}
inline float TorchConvTranspose2d::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline float TorchConvTranspose2d::weight(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.weight)
  return _internal_weight(index);
}
inline void TorchConvTranspose2d::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.weight)
}
inline void TorchConvTranspose2d::_internal_add_weight(float value) {
  weight_.Add(value);
}
inline void TorchConvTranspose2d::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConvTranspose2d::_internal_weight() const {
  return weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConvTranspose2d::weight() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConvTranspose2d::_internal_mutable_weight() {
  return &weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConvTranspose2d::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.weight)
  return _internal_mutable_weight();
}

// repeated float bias = 11;
inline int TorchConvTranspose2d::_internal_bias_size() const {
  return bias_.size();
}
inline int TorchConvTranspose2d::bias_size() const {
  return _internal_bias_size();
}
inline void TorchConvTranspose2d::clear_bias() {
  bias_.Clear();
}
inline float TorchConvTranspose2d::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline float TorchConvTranspose2d::bias(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConvTranspose2d.bias)
  return _internal_bias(index);
}
inline void TorchConvTranspose2d::set_bias(int index, float value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConvTranspose2d.bias)
}
inline void TorchConvTranspose2d::_internal_add_bias(float value) {
  bias_.Add(value);
}
inline void TorchConvTranspose2d::add_bias(float value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchConvTranspose2d.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConvTranspose2d::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchConvTranspose2d::bias() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchConvTranspose2d.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConvTranspose2d::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchConvTranspose2d::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchConvTranspose2d.bias)
  return _internal_mutable_bias();
}

// -------------------------------------------------------------------

// TorchBatchNorm2d

// int32 num_features = 1;
inline void TorchBatchNorm2d::clear_num_features() {
  num_features_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchBatchNorm2d::_internal_num_features() const {
  return num_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchBatchNorm2d::num_features() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.num_features)
  return _internal_num_features();
}
inline void TorchBatchNorm2d::_internal_set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_features_ = value;
}
inline void TorchBatchNorm2d::set_num_features(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_features(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.num_features)
}

// bool affine = 2;
inline void TorchBatchNorm2d::clear_affine() {
  affine_ = false;
}
inline bool TorchBatchNorm2d::_internal_affine() const {
  return affine_;
}
inline bool TorchBatchNorm2d::affine() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.affine)
  return _internal_affine();
}
inline void TorchBatchNorm2d::_internal_set_affine(bool value) {
  
  affine_ = value;
}
inline void TorchBatchNorm2d::set_affine(bool value) {
  _internal_set_affine(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.affine)
}

// repeated float weight = 3;
inline int TorchBatchNorm2d::_internal_weight_size() const {
  return weight_.size();
}
inline int TorchBatchNorm2d::weight_size() const {
  return _internal_weight_size();
}
inline void TorchBatchNorm2d::clear_weight() {
  weight_.Clear();
}
inline float TorchBatchNorm2d::_internal_weight(int index) const {
  return weight_.Get(index);
}
inline float TorchBatchNorm2d::weight(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.weight)
  return _internal_weight(index);
}
inline void TorchBatchNorm2d::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.weight)
}
inline void TorchBatchNorm2d::_internal_add_weight(float value) {
  weight_.Add(value);
}
inline void TorchBatchNorm2d::add_weight(float value) {
  _internal_add_weight(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchBatchNorm2d.weight)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::_internal_weight() const {
  return weight_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::weight() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchBatchNorm2d.weight)
  return _internal_weight();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::_internal_mutable_weight() {
  return &weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchBatchNorm2d.weight)
  return _internal_mutable_weight();
}

// repeated float bias = 4;
inline int TorchBatchNorm2d::_internal_bias_size() const {
  return bias_.size();
}
inline int TorchBatchNorm2d::bias_size() const {
  return _internal_bias_size();
}
inline void TorchBatchNorm2d::clear_bias() {
  bias_.Clear();
}
inline float TorchBatchNorm2d::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline float TorchBatchNorm2d::bias(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.bias)
  return _internal_bias(index);
}
inline void TorchBatchNorm2d::set_bias(int index, float value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.bias)
}
inline void TorchBatchNorm2d::_internal_add_bias(float value) {
  bias_.Add(value);
}
inline void TorchBatchNorm2d::add_bias(float value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchBatchNorm2d.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::bias() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchBatchNorm2d.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchBatchNorm2d.bias)
  return _internal_mutable_bias();
}

// repeated float running_mean = 5;
inline int TorchBatchNorm2d::_internal_running_mean_size() const {
  return running_mean_.size();
}
inline int TorchBatchNorm2d::running_mean_size() const {
  return _internal_running_mean_size();
}
inline void TorchBatchNorm2d::clear_running_mean() {
  running_mean_.Clear();
}
inline float TorchBatchNorm2d::_internal_running_mean(int index) const {
  return running_mean_.Get(index);
}
inline float TorchBatchNorm2d::running_mean(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.running_mean)
  return _internal_running_mean(index);
}
inline void TorchBatchNorm2d::set_running_mean(int index, float value) {
  running_mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.running_mean)
}
inline void TorchBatchNorm2d::_internal_add_running_mean(float value) {
  running_mean_.Add(value);
}
inline void TorchBatchNorm2d::add_running_mean(float value) {
  _internal_add_running_mean(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchBatchNorm2d.running_mean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::_internal_running_mean() const {
  return running_mean_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::running_mean() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchBatchNorm2d.running_mean)
  return _internal_running_mean();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::_internal_mutable_running_mean() {
  return &running_mean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::mutable_running_mean() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchBatchNorm2d.running_mean)
  return _internal_mutable_running_mean();
}

// repeated float running_var = 6;
inline int TorchBatchNorm2d::_internal_running_var_size() const {
  return running_var_.size();
}
inline int TorchBatchNorm2d::running_var_size() const {
  return _internal_running_var_size();
}
inline void TorchBatchNorm2d::clear_running_var() {
  running_var_.Clear();
}
inline float TorchBatchNorm2d::_internal_running_var(int index) const {
  return running_var_.Get(index);
}
inline float TorchBatchNorm2d::running_var(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchBatchNorm2d.running_var)
  return _internal_running_var(index);
}
inline void TorchBatchNorm2d::set_running_var(int index, float value) {
  running_var_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchBatchNorm2d.running_var)
}
inline void TorchBatchNorm2d::_internal_add_running_var(float value) {
  running_var_.Add(value);
}
inline void TorchBatchNorm2d::add_running_var(float value) {
  _internal_add_running_var(value);
  // @@protoc_insertion_point(field_add:oris_ai.TorchBatchNorm2d.running_var)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::_internal_running_var() const {
  return running_var_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TorchBatchNorm2d::running_var() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchBatchNorm2d.running_var)
  return _internal_running_var();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::_internal_mutable_running_var() {
  return &running_var_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TorchBatchNorm2d::mutable_running_var() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchBatchNorm2d.running_var)
  return _internal_mutable_running_var();
}

// -------------------------------------------------------------------

// TorchActivation

// .oris_ai.ActivationType type = 1;
inline void TorchActivation::clear_type() {
  type_ = 0;
}
inline ::oris_ai::ActivationType TorchActivation::_internal_type() const {
  return static_cast< ::oris_ai::ActivationType >(type_);
}
inline ::oris_ai::ActivationType TorchActivation::type() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchActivation.type)
  return _internal_type();
}
inline void TorchActivation::_internal_set_type(::oris_ai::ActivationType value) {
  
  type_ = value;
}
inline void TorchActivation::set_type(::oris_ai::ActivationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchActivation.type)
}

// -------------------------------------------------------------------

// TorchMaxPool2d

// int32 kernel_size = 1;
inline void TorchMaxPool2d::clear_kernel_size() {
  kernel_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::kernel_size() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchMaxPool2d.kernel_size)
  return _internal_kernel_size();
}
inline void TorchMaxPool2d::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kernel_size_ = value;
}
inline void TorchMaxPool2d::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchMaxPool2d.kernel_size)
}

// int32 stride = 2;
inline void TorchMaxPool2d::clear_stride() {
  stride_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::stride() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchMaxPool2d.stride)
  return _internal_stride();
}
inline void TorchMaxPool2d::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stride_ = value;
}
inline void TorchMaxPool2d::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchMaxPool2d.stride)
}

// int32 padding = 3;
inline void TorchMaxPool2d::clear_padding() {
  padding_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::_internal_padding() const {
  return padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::padding() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchMaxPool2d.padding)
  return _internal_padding();
}
inline void TorchMaxPool2d::_internal_set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  padding_ = value;
}
inline void TorchMaxPool2d::set_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchMaxPool2d.padding)
}

// int32 dilation = 4;
inline void TorchMaxPool2d::clear_dilation() {
  dilation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::_internal_dilation() const {
  return dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchMaxPool2d::dilation() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchMaxPool2d.dilation)
  return _internal_dilation();
}
inline void TorchMaxPool2d::_internal_set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dilation_ = value;
}
inline void TorchMaxPool2d::set_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dilation(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchMaxPool2d.dilation)
}

// bool ceil_mode = 5;
inline void TorchMaxPool2d::clear_ceil_mode() {
  ceil_mode_ = false;
}
inline bool TorchMaxPool2d::_internal_ceil_mode() const {
  return ceil_mode_;
}
inline bool TorchMaxPool2d::ceil_mode() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchMaxPool2d.ceil_mode)
  return _internal_ceil_mode();
}
inline void TorchMaxPool2d::_internal_set_ceil_mode(bool value) {
  
  ceil_mode_ = value;
}
inline void TorchMaxPool2d::set_ceil_mode(bool value) {
  _internal_set_ceil_mode(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchMaxPool2d.ceil_mode)
}

// -------------------------------------------------------------------

// TorchConcat

// int32 dimension = 1;
inline void TorchConcat::clear_dimension() {
  dimension_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConcat::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TorchConcat::dimension() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchConcat.dimension)
  return _internal_dimension();
}
inline void TorchConcat::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimension_ = value;
}
inline void TorchConcat::set_dimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchConcat.dimension)
}

// -------------------------------------------------------------------

// TorchUpsample

// string mode = 1;
inline void TorchUpsample::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TorchUpsample::mode() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchUpsample.mode)
  return _internal_mode();
}
inline void TorchUpsample::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchUpsample.mode)
}
inline std::string* TorchUpsample::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchUpsample.mode)
  return _internal_mutable_mode();
}
inline const std::string& TorchUpsample::_internal_mode() const {
  return mode_.Get();
}
inline void TorchUpsample::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TorchUpsample::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oris_ai.TorchUpsample.mode)
}
inline void TorchUpsample::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oris_ai.TorchUpsample.mode)
}
inline void TorchUpsample::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oris_ai.TorchUpsample.mode)
}
inline std::string* TorchUpsample::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TorchUpsample::release_mode() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchUpsample.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TorchUpsample::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oris_ai.TorchUpsample.mode)
}
inline std::string* TorchUpsample::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchUpsample.mode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TorchUpsample::unsafe_arena_set_allocated_mode(
    std::string* mode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchUpsample.mode)
}

// float scale_factor = 2;
inline void TorchUpsample::clear_scale_factor() {
  scale_factor_ = 0;
}
inline float TorchUpsample::_internal_scale_factor() const {
  return scale_factor_;
}
inline float TorchUpsample::scale_factor() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchUpsample.scale_factor)
  return _internal_scale_factor();
}
inline void TorchUpsample::_internal_set_scale_factor(float value) {
  
  scale_factor_ = value;
}
inline void TorchUpsample::set_scale_factor(float value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchUpsample.scale_factor)
}

// -------------------------------------------------------------------

// QuantizedTorchConv2d

// int32 in_channels = 1;
inline void QuantizedTorchConv2d::clear_in_channels() {
  in_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_in_channels() const {
  return in_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::in_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.in_channels)
  return _internal_in_channels();
}
inline void QuantizedTorchConv2d::_internal_set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  in_channels_ = value;
}
inline void QuantizedTorchConv2d::set_in_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.in_channels)
}

// int32 out_channels = 2;
inline void QuantizedTorchConv2d::clear_out_channels() {
  out_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_out_channels() const {
  return out_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::out_channels() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.out_channels)
  return _internal_out_channels();
}
inline void QuantizedTorchConv2d::_internal_set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_channels_ = value;
}
inline void QuantizedTorchConv2d::set_out_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_channels(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.out_channels)
}

// repeated int32 kernel_size = 3;
inline int QuantizedTorchConv2d::_internal_kernel_size_size() const {
  return kernel_size_.size();
}
inline int QuantizedTorchConv2d::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void QuantizedTorchConv2d::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_kernel_size(int index) const {
  return kernel_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.kernel_size)
  return _internal_kernel_size(index);
}
inline void QuantizedTorchConv2d::set_kernel_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.kernel_size)
}
inline void QuantizedTorchConv2d::_internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kernel_size_.Add(value);
}
inline void QuantizedTorchConv2d::add_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kernel_size(value);
  // @@protoc_insertion_point(field_add:oris_ai.QuantizedTorchConv2d.kernel_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::_internal_kernel_size() const {
  return kernel_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::kernel_size() const {
  // @@protoc_insertion_point(field_list:oris_ai.QuantizedTorchConv2d.kernel_size)
  return _internal_kernel_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::_internal_mutable_kernel_size() {
  return &kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.QuantizedTorchConv2d.kernel_size)
  return _internal_mutable_kernel_size();
}

// repeated int32 stride = 4;
inline int QuantizedTorchConv2d::_internal_stride_size() const {
  return stride_.size();
}
inline int QuantizedTorchConv2d::stride_size() const {
  return _internal_stride_size();
}
inline void QuantizedTorchConv2d::clear_stride() {
  stride_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_stride(int index) const {
  return stride_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::stride(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.stride)
  return _internal_stride(index);
}
inline void QuantizedTorchConv2d::set_stride(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.stride)
}
inline void QuantizedTorchConv2d::_internal_add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stride_.Add(value);
}
inline void QuantizedTorchConv2d::add_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:oris_ai.QuantizedTorchConv2d.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::_internal_stride() const {
  return stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::stride() const {
  // @@protoc_insertion_point(field_list:oris_ai.QuantizedTorchConv2d.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::_internal_mutable_stride() {
  return &stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.QuantizedTorchConv2d.stride)
  return _internal_mutable_stride();
}

// repeated int32 padding = 5;
inline int QuantizedTorchConv2d::_internal_padding_size() const {
  return padding_.size();
}
inline int QuantizedTorchConv2d::padding_size() const {
  return _internal_padding_size();
}
inline void QuantizedTorchConv2d::clear_padding() {
  padding_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_padding(int index) const {
  return padding_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::padding(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.padding)
  return _internal_padding(index);
}
inline void QuantizedTorchConv2d::set_padding(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.padding)
}
inline void QuantizedTorchConv2d::_internal_add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  padding_.Add(value);
}
inline void QuantizedTorchConv2d::add_padding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:oris_ai.QuantizedTorchConv2d.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::_internal_padding() const {
  return padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::padding() const {
  // @@protoc_insertion_point(field_list:oris_ai.QuantizedTorchConv2d.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::_internal_mutable_padding() {
  return &padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.QuantizedTorchConv2d.padding)
  return _internal_mutable_padding();
}

// repeated int32 dilation = 6;
inline int QuantizedTorchConv2d::_internal_dilation_size() const {
  return dilation_.size();
}
inline int QuantizedTorchConv2d::dilation_size() const {
  return _internal_dilation_size();
}
inline void QuantizedTorchConv2d::clear_dilation() {
  dilation_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_dilation(int index) const {
  return dilation_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::dilation(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.dilation)
  return _internal_dilation(index);
}
inline void QuantizedTorchConv2d::set_dilation(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.dilation)
}
inline void QuantizedTorchConv2d::_internal_add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dilation_.Add(value);
}
inline void QuantizedTorchConv2d::add_dilation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:oris_ai.QuantizedTorchConv2d.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::_internal_dilation() const {
  return dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::dilation() const {
  // @@protoc_insertion_point(field_list:oris_ai.QuantizedTorchConv2d.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::_internal_mutable_dilation() {
  return &dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.QuantizedTorchConv2d.dilation)
  return _internal_mutable_dilation();
}

// int32 groups = 7;
inline void QuantizedTorchConv2d::clear_groups() {
  groups_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_groups() const {
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::groups() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.groups)
  return _internal_groups();
}
inline void QuantizedTorchConv2d::_internal_set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groups_ = value;
}
inline void QuantizedTorchConv2d::set_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groups(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.groups)
}

// bool use_bias = 8;
inline void QuantizedTorchConv2d::clear_use_bias() {
  use_bias_ = false;
}
inline bool QuantizedTorchConv2d::_internal_use_bias() const {
  return use_bias_;
}
inline bool QuantizedTorchConv2d::use_bias() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.use_bias)
  return _internal_use_bias();
}
inline void QuantizedTorchConv2d::_internal_set_use_bias(bool value) {
  
  use_bias_ = value;
}
inline void QuantizedTorchConv2d::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.use_bias)
}

// bytes weight = 9;
inline void QuantizedTorchConv2d::clear_weight() {
  weight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuantizedTorchConv2d::weight() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.weight)
  return _internal_weight();
}
inline void QuantizedTorchConv2d::set_weight(const std::string& value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.weight)
}
inline std::string* QuantizedTorchConv2d::mutable_weight() {
  // @@protoc_insertion_point(field_mutable:oris_ai.QuantizedTorchConv2d.weight)
  return _internal_mutable_weight();
}
inline const std::string& QuantizedTorchConv2d::_internal_weight() const {
  return weight_.Get();
}
inline void QuantizedTorchConv2d::_internal_set_weight(const std::string& value) {
  
  weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuantizedTorchConv2d::set_weight(std::string&& value) {
  
  weight_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oris_ai.QuantizedTorchConv2d.weight)
}
inline void QuantizedTorchConv2d::set_weight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oris_ai.QuantizedTorchConv2d.weight)
}
inline void QuantizedTorchConv2d::set_weight(const void* value,
    size_t size) {
  
  weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oris_ai.QuantizedTorchConv2d.weight)
}
inline std::string* QuantizedTorchConv2d::_internal_mutable_weight() {
  
  return weight_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuantizedTorchConv2d::release_weight() {
  // @@protoc_insertion_point(field_release:oris_ai.QuantizedTorchConv2d.weight)
  return weight_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuantizedTorchConv2d::set_allocated_weight(std::string* weight) {
  if (weight != nullptr) {
    
  } else {
    
  }
  weight_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oris_ai.QuantizedTorchConv2d.weight)
}
inline std::string* QuantizedTorchConv2d::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.QuantizedTorchConv2d.weight)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return weight_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QuantizedTorchConv2d::unsafe_arena_set_allocated_weight(
    std::string* weight) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (weight != nullptr) {
    
  } else {
    
  }
  weight_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      weight, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.QuantizedTorchConv2d.weight)
}

// repeated int32 bias = 10;
inline int QuantizedTorchConv2d::_internal_bias_size() const {
  return bias_.size();
}
inline int QuantizedTorchConv2d::bias_size() const {
  return _internal_bias_size();
}
inline void QuantizedTorchConv2d::clear_bias() {
  bias_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuantizedTorchConv2d::bias(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.bias)
  return _internal_bias(index);
}
inline void QuantizedTorchConv2d::set_bias(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.bias)
}
inline void QuantizedTorchConv2d::_internal_add_bias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bias_.Add(value);
}
inline void QuantizedTorchConv2d::add_bias(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:oris_ai.QuantizedTorchConv2d.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QuantizedTorchConv2d::bias() const {
  // @@protoc_insertion_point(field_list:oris_ai.QuantizedTorchConv2d.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QuantizedTorchConv2d::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.QuantizedTorchConv2d.bias)
  return _internal_mutable_bias();
}

// float weight_scale = 11;
inline void QuantizedTorchConv2d::clear_weight_scale() {
  weight_scale_ = 0;
}
inline float QuantizedTorchConv2d::_internal_weight_scale() const {
  return weight_scale_;
}
inline float QuantizedTorchConv2d::weight_scale() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.weight_scale)
  return _internal_weight_scale();
}
inline void QuantizedTorchConv2d::_internal_set_weight_scale(float value) {
  
  weight_scale_ = value;
}
inline void QuantizedTorchConv2d::set_weight_scale(float value) {
  _internal_set_weight_scale(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.weight_scale)
}

// float input_scale = 12;
inline void QuantizedTorchConv2d::clear_input_scale() {
  input_scale_ = 0;
}
inline float QuantizedTorchConv2d::_internal_input_scale() const {
  return input_scale_;
}
inline float QuantizedTorchConv2d::input_scale() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.input_scale)
  return _internal_input_scale();
}
inline void QuantizedTorchConv2d::_internal_set_input_scale(float value) {
  
  input_scale_ = value;
}
inline void QuantizedTorchConv2d::set_input_scale(float value) {
  _internal_set_input_scale(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.input_scale)
}

// float output_scale = 13;
inline void QuantizedTorchConv2d::clear_output_scale() {
  output_scale_ = 0;
}
inline float QuantizedTorchConv2d::_internal_output_scale() const {
  return output_scale_;
}
inline float QuantizedTorchConv2d::output_scale() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchConv2d.output_scale)
  return _internal_output_scale();
}
inline void QuantizedTorchConv2d::_internal_set_output_scale(float value) {
  
  output_scale_ = value;
}
inline void QuantizedTorchConv2d::set_output_scale(float value) {
  _internal_set_output_scale(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchConv2d.output_scale)
}

// -------------------------------------------------------------------

// QuantizedTorchActivation

// .oris_ai.ActivationType type = 1;
inline void QuantizedTorchActivation::clear_type() {
  type_ = 0;
}
inline ::oris_ai::ActivationType QuantizedTorchActivation::_internal_type() const {
  return static_cast< ::oris_ai::ActivationType >(type_);
}
inline ::oris_ai::ActivationType QuantizedTorchActivation::type() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchActivation.type)
  return _internal_type();
}
inline void QuantizedTorchActivation::_internal_set_type(::oris_ai::ActivationType value) {
  
  type_ = value;
}
inline void QuantizedTorchActivation::set_type(::oris_ai::ActivationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchActivation.type)
}

// float input_scale = 2;
inline void QuantizedTorchActivation::clear_input_scale() {
  input_scale_ = 0;
}
inline float QuantizedTorchActivation::_internal_input_scale() const {
  return input_scale_;
}
inline float QuantizedTorchActivation::input_scale() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchActivation.input_scale)
  return _internal_input_scale();
}
inline void QuantizedTorchActivation::_internal_set_input_scale(float value) {
  
  input_scale_ = value;
}
inline void QuantizedTorchActivation::set_input_scale(float value) {
  _internal_set_input_scale(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchActivation.input_scale)
}

// float output_scale = 3;
inline void QuantizedTorchActivation::clear_output_scale() {
  output_scale_ = 0;
}
inline float QuantizedTorchActivation::_internal_output_scale() const {
  return output_scale_;
}
inline float QuantizedTorchActivation::output_scale() const {
  // @@protoc_insertion_point(field_get:oris_ai.QuantizedTorchActivation.output_scale)
  return _internal_output_scale();
}
inline void QuantizedTorchActivation::_internal_set_output_scale(float value) {
  
  output_scale_ = value;
}
inline void QuantizedTorchActivation::set_output_scale(float value) {
  _internal_set_output_scale(value);
  // @@protoc_insertion_point(field_set:oris_ai.QuantizedTorchActivation.output_scale)
}

// -------------------------------------------------------------------

// TorchLayer

// string name = 1;
inline void TorchLayer::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TorchLayer::name() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.name)
  return _internal_name();
}
inline void TorchLayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:oris_ai.TorchLayer.name)
}
inline std::string* TorchLayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.name)
  return _internal_mutable_name();
}
inline const std::string& TorchLayer::_internal_name() const {
  return name_.Get();
}
inline void TorchLayer::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TorchLayer::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oris_ai.TorchLayer.name)
}
inline void TorchLayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oris_ai.TorchLayer.name)
}
inline void TorchLayer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oris_ai.TorchLayer.name)
}
inline std::string* TorchLayer::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TorchLayer::release_name() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TorchLayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oris_ai.TorchLayer.name)
}
inline std::string* TorchLayer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TorchLayer::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.name)
}

// .oris_ai.TorchConv2d conv2d = 2;
inline bool TorchLayer::_internal_has_conv2d() const {
  return layer_type_case() == kConv2D;
}
inline bool TorchLayer::has_conv2d() const {
  return _internal_has_conv2d();
}
inline void TorchLayer::set_has_conv2d() {
  _oneof_case_[0] = kConv2D;
}
inline void TorchLayer::clear_conv2d() {
  if (_internal_has_conv2d()) {
    if (GetArena() == nullptr) {
      delete layer_type_.conv2d_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchConv2d* TorchLayer::release_conv2d() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.conv2d)
  if (_internal_has_conv2d()) {
    clear_has_layer_type();
      ::oris_ai::TorchConv2d* temp = layer_type_.conv2d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.conv2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchConv2d& TorchLayer::_internal_conv2d() const {
  return _internal_has_conv2d()
      ? *layer_type_.conv2d_
      : *reinterpret_cast< ::oris_ai::TorchConv2d*>(&::oris_ai::_TorchConv2d_default_instance_);
}
inline const ::oris_ai::TorchConv2d& TorchLayer::conv2d() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.conv2d)
  return _internal_conv2d();
}
inline ::oris_ai::TorchConv2d* TorchLayer::unsafe_arena_release_conv2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.conv2d)
  if (_internal_has_conv2d()) {
    clear_has_layer_type();
    ::oris_ai::TorchConv2d* temp = layer_type_.conv2d_;
    layer_type_.conv2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_conv2d(::oris_ai::TorchConv2d* conv2d) {
  clear_layer_type();
  if (conv2d) {
    set_has_conv2d();
    layer_type_.conv2d_ = conv2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.conv2d)
}
inline ::oris_ai::TorchConv2d* TorchLayer::_internal_mutable_conv2d() {
  if (!_internal_has_conv2d()) {
    clear_layer_type();
    set_has_conv2d();
    layer_type_.conv2d_ = CreateMaybeMessage< ::oris_ai::TorchConv2d >(GetArena());
  }
  return layer_type_.conv2d_;
}
inline ::oris_ai::TorchConv2d* TorchLayer::mutable_conv2d() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.conv2d)
  return _internal_mutable_conv2d();
}

// .oris_ai.TorchConvTranspose2d convtranspose2d = 3;
inline bool TorchLayer::_internal_has_convtranspose2d() const {
  return layer_type_case() == kConvtranspose2D;
}
inline bool TorchLayer::has_convtranspose2d() const {
  return _internal_has_convtranspose2d();
}
inline void TorchLayer::set_has_convtranspose2d() {
  _oneof_case_[0] = kConvtranspose2D;
}
inline void TorchLayer::clear_convtranspose2d() {
  if (_internal_has_convtranspose2d()) {
    if (GetArena() == nullptr) {
      delete layer_type_.convtranspose2d_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchConvTranspose2d* TorchLayer::release_convtranspose2d() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.convtranspose2d)
  if (_internal_has_convtranspose2d()) {
    clear_has_layer_type();
      ::oris_ai::TorchConvTranspose2d* temp = layer_type_.convtranspose2d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.convtranspose2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchConvTranspose2d& TorchLayer::_internal_convtranspose2d() const {
  return _internal_has_convtranspose2d()
      ? *layer_type_.convtranspose2d_
      : *reinterpret_cast< ::oris_ai::TorchConvTranspose2d*>(&::oris_ai::_TorchConvTranspose2d_default_instance_);
}
inline const ::oris_ai::TorchConvTranspose2d& TorchLayer::convtranspose2d() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.convtranspose2d)
  return _internal_convtranspose2d();
}
inline ::oris_ai::TorchConvTranspose2d* TorchLayer::unsafe_arena_release_convtranspose2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.convtranspose2d)
  if (_internal_has_convtranspose2d()) {
    clear_has_layer_type();
    ::oris_ai::TorchConvTranspose2d* temp = layer_type_.convtranspose2d_;
    layer_type_.convtranspose2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_convtranspose2d(::oris_ai::TorchConvTranspose2d* convtranspose2d) {
  clear_layer_type();
  if (convtranspose2d) {
    set_has_convtranspose2d();
    layer_type_.convtranspose2d_ = convtranspose2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.convtranspose2d)
}
inline ::oris_ai::TorchConvTranspose2d* TorchLayer::_internal_mutable_convtranspose2d() {
  if (!_internal_has_convtranspose2d()) {
    clear_layer_type();
    set_has_convtranspose2d();
    layer_type_.convtranspose2d_ = CreateMaybeMessage< ::oris_ai::TorchConvTranspose2d >(GetArena());
  }
  return layer_type_.convtranspose2d_;
}
inline ::oris_ai::TorchConvTranspose2d* TorchLayer::mutable_convtranspose2d() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.convtranspose2d)
  return _internal_mutable_convtranspose2d();
}

// .oris_ai.TorchBatchNorm2d batchnorm2d = 4;
inline bool TorchLayer::_internal_has_batchnorm2d() const {
  return layer_type_case() == kBatchnorm2D;
}
inline bool TorchLayer::has_batchnorm2d() const {
  return _internal_has_batchnorm2d();
}
inline void TorchLayer::set_has_batchnorm2d() {
  _oneof_case_[0] = kBatchnorm2D;
}
inline void TorchLayer::clear_batchnorm2d() {
  if (_internal_has_batchnorm2d()) {
    if (GetArena() == nullptr) {
      delete layer_type_.batchnorm2d_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchBatchNorm2d* TorchLayer::release_batchnorm2d() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.batchnorm2d)
  if (_internal_has_batchnorm2d()) {
    clear_has_layer_type();
      ::oris_ai::TorchBatchNorm2d* temp = layer_type_.batchnorm2d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.batchnorm2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchBatchNorm2d& TorchLayer::_internal_batchnorm2d() const {
  return _internal_has_batchnorm2d()
      ? *layer_type_.batchnorm2d_
      : *reinterpret_cast< ::oris_ai::TorchBatchNorm2d*>(&::oris_ai::_TorchBatchNorm2d_default_instance_);
}
inline const ::oris_ai::TorchBatchNorm2d& TorchLayer::batchnorm2d() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.batchnorm2d)
  return _internal_batchnorm2d();
}
inline ::oris_ai::TorchBatchNorm2d* TorchLayer::unsafe_arena_release_batchnorm2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.batchnorm2d)
  if (_internal_has_batchnorm2d()) {
    clear_has_layer_type();
    ::oris_ai::TorchBatchNorm2d* temp = layer_type_.batchnorm2d_;
    layer_type_.batchnorm2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_batchnorm2d(::oris_ai::TorchBatchNorm2d* batchnorm2d) {
  clear_layer_type();
  if (batchnorm2d) {
    set_has_batchnorm2d();
    layer_type_.batchnorm2d_ = batchnorm2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.batchnorm2d)
}
inline ::oris_ai::TorchBatchNorm2d* TorchLayer::_internal_mutable_batchnorm2d() {
  if (!_internal_has_batchnorm2d()) {
    clear_layer_type();
    set_has_batchnorm2d();
    layer_type_.batchnorm2d_ = CreateMaybeMessage< ::oris_ai::TorchBatchNorm2d >(GetArena());
  }
  return layer_type_.batchnorm2d_;
}
inline ::oris_ai::TorchBatchNorm2d* TorchLayer::mutable_batchnorm2d() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.batchnorm2d)
  return _internal_mutable_batchnorm2d();
}

// .oris_ai.TorchActivation activation = 5;
inline bool TorchLayer::_internal_has_activation() const {
  return layer_type_case() == kActivation;
}
inline bool TorchLayer::has_activation() const {
  return _internal_has_activation();
}
inline void TorchLayer::set_has_activation() {
  _oneof_case_[0] = kActivation;
}
inline void TorchLayer::clear_activation() {
  if (_internal_has_activation()) {
    if (GetArena() == nullptr) {
      delete layer_type_.activation_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchActivation* TorchLayer::release_activation() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.activation)
  if (_internal_has_activation()) {
    clear_has_layer_type();
      ::oris_ai::TorchActivation* temp = layer_type_.activation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.activation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchActivation& TorchLayer::_internal_activation() const {
  return _internal_has_activation()
      ? *layer_type_.activation_
      : *reinterpret_cast< ::oris_ai::TorchActivation*>(&::oris_ai::_TorchActivation_default_instance_);
}
inline const ::oris_ai::TorchActivation& TorchLayer::activation() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.activation)
  return _internal_activation();
}
inline ::oris_ai::TorchActivation* TorchLayer::unsafe_arena_release_activation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.activation)
  if (_internal_has_activation()) {
    clear_has_layer_type();
    ::oris_ai::TorchActivation* temp = layer_type_.activation_;
    layer_type_.activation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_activation(::oris_ai::TorchActivation* activation) {
  clear_layer_type();
  if (activation) {
    set_has_activation();
    layer_type_.activation_ = activation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.activation)
}
inline ::oris_ai::TorchActivation* TorchLayer::_internal_mutable_activation() {
  if (!_internal_has_activation()) {
    clear_layer_type();
    set_has_activation();
    layer_type_.activation_ = CreateMaybeMessage< ::oris_ai::TorchActivation >(GetArena());
  }
  return layer_type_.activation_;
}
inline ::oris_ai::TorchActivation* TorchLayer::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.activation)
  return _internal_mutable_activation();
}

// .oris_ai.TorchMaxPool2d maxpool2d = 6;
inline bool TorchLayer::_internal_has_maxpool2d() const {
  return layer_type_case() == kMaxpool2D;
}
inline bool TorchLayer::has_maxpool2d() const {
  return _internal_has_maxpool2d();
}
inline void TorchLayer::set_has_maxpool2d() {
  _oneof_case_[0] = kMaxpool2D;
}
inline void TorchLayer::clear_maxpool2d() {
  if (_internal_has_maxpool2d()) {
    if (GetArena() == nullptr) {
      delete layer_type_.maxpool2d_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchMaxPool2d* TorchLayer::release_maxpool2d() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.maxpool2d)
  if (_internal_has_maxpool2d()) {
    clear_has_layer_type();
      ::oris_ai::TorchMaxPool2d* temp = layer_type_.maxpool2d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.maxpool2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchMaxPool2d& TorchLayer::_internal_maxpool2d() const {
  return _internal_has_maxpool2d()
      ? *layer_type_.maxpool2d_
      : *reinterpret_cast< ::oris_ai::TorchMaxPool2d*>(&::oris_ai::_TorchMaxPool2d_default_instance_);
}
inline const ::oris_ai::TorchMaxPool2d& TorchLayer::maxpool2d() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.maxpool2d)
  return _internal_maxpool2d();
}
inline ::oris_ai::TorchMaxPool2d* TorchLayer::unsafe_arena_release_maxpool2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.maxpool2d)
  if (_internal_has_maxpool2d()) {
    clear_has_layer_type();
    ::oris_ai::TorchMaxPool2d* temp = layer_type_.maxpool2d_;
    layer_type_.maxpool2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_maxpool2d(::oris_ai::TorchMaxPool2d* maxpool2d) {
  clear_layer_type();
  if (maxpool2d) {
    set_has_maxpool2d();
    layer_type_.maxpool2d_ = maxpool2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.maxpool2d)
}
inline ::oris_ai::TorchMaxPool2d* TorchLayer::_internal_mutable_maxpool2d() {
  if (!_internal_has_maxpool2d()) {
    clear_layer_type();
    set_has_maxpool2d();
    layer_type_.maxpool2d_ = CreateMaybeMessage< ::oris_ai::TorchMaxPool2d >(GetArena());
  }
  return layer_type_.maxpool2d_;
}
inline ::oris_ai::TorchMaxPool2d* TorchLayer::mutable_maxpool2d() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.maxpool2d)
  return _internal_mutable_maxpool2d();
}

// .oris_ai.TorchConcat concat = 7;
inline bool TorchLayer::_internal_has_concat() const {
  return layer_type_case() == kConcat;
}
inline bool TorchLayer::has_concat() const {
  return _internal_has_concat();
}
inline void TorchLayer::set_has_concat() {
  _oneof_case_[0] = kConcat;
}
inline void TorchLayer::clear_concat() {
  if (_internal_has_concat()) {
    if (GetArena() == nullptr) {
      delete layer_type_.concat_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchConcat* TorchLayer::release_concat() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.concat)
  if (_internal_has_concat()) {
    clear_has_layer_type();
      ::oris_ai::TorchConcat* temp = layer_type_.concat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.concat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchConcat& TorchLayer::_internal_concat() const {
  return _internal_has_concat()
      ? *layer_type_.concat_
      : *reinterpret_cast< ::oris_ai::TorchConcat*>(&::oris_ai::_TorchConcat_default_instance_);
}
inline const ::oris_ai::TorchConcat& TorchLayer::concat() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.concat)
  return _internal_concat();
}
inline ::oris_ai::TorchConcat* TorchLayer::unsafe_arena_release_concat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.concat)
  if (_internal_has_concat()) {
    clear_has_layer_type();
    ::oris_ai::TorchConcat* temp = layer_type_.concat_;
    layer_type_.concat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_concat(::oris_ai::TorchConcat* concat) {
  clear_layer_type();
  if (concat) {
    set_has_concat();
    layer_type_.concat_ = concat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.concat)
}
inline ::oris_ai::TorchConcat* TorchLayer::_internal_mutable_concat() {
  if (!_internal_has_concat()) {
    clear_layer_type();
    set_has_concat();
    layer_type_.concat_ = CreateMaybeMessage< ::oris_ai::TorchConcat >(GetArena());
  }
  return layer_type_.concat_;
}
inline ::oris_ai::TorchConcat* TorchLayer::mutable_concat() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.concat)
  return _internal_mutable_concat();
}

// .oris_ai.TorchUpsample upsample = 8;
inline bool TorchLayer::_internal_has_upsample() const {
  return layer_type_case() == kUpsample;
}
inline bool TorchLayer::has_upsample() const {
  return _internal_has_upsample();
}
inline void TorchLayer::set_has_upsample() {
  _oneof_case_[0] = kUpsample;
}
inline void TorchLayer::clear_upsample() {
  if (_internal_has_upsample()) {
    if (GetArena() == nullptr) {
      delete layer_type_.upsample_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::TorchUpsample* TorchLayer::release_upsample() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.upsample)
  if (_internal_has_upsample()) {
    clear_has_layer_type();
      ::oris_ai::TorchUpsample* temp = layer_type_.upsample_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.upsample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::TorchUpsample& TorchLayer::_internal_upsample() const {
  return _internal_has_upsample()
      ? *layer_type_.upsample_
      : *reinterpret_cast< ::oris_ai::TorchUpsample*>(&::oris_ai::_TorchUpsample_default_instance_);
}
inline const ::oris_ai::TorchUpsample& TorchLayer::upsample() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.upsample)
  return _internal_upsample();
}
inline ::oris_ai::TorchUpsample* TorchLayer::unsafe_arena_release_upsample() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.upsample)
  if (_internal_has_upsample()) {
    clear_has_layer_type();
    ::oris_ai::TorchUpsample* temp = layer_type_.upsample_;
    layer_type_.upsample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_upsample(::oris_ai::TorchUpsample* upsample) {
  clear_layer_type();
  if (upsample) {
    set_has_upsample();
    layer_type_.upsample_ = upsample;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.upsample)
}
inline ::oris_ai::TorchUpsample* TorchLayer::_internal_mutable_upsample() {
  if (!_internal_has_upsample()) {
    clear_layer_type();
    set_has_upsample();
    layer_type_.upsample_ = CreateMaybeMessage< ::oris_ai::TorchUpsample >(GetArena());
  }
  return layer_type_.upsample_;
}
inline ::oris_ai::TorchUpsample* TorchLayer::mutable_upsample() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.upsample)
  return _internal_mutable_upsample();
}

// .oris_ai.QuantizedTorchConv2d quantized_conv2d = 9;
inline bool TorchLayer::_internal_has_quantized_conv2d() const {
  return layer_type_case() == kQuantizedConv2D;
}
inline bool TorchLayer::has_quantized_conv2d() const {
  return _internal_has_quantized_conv2d();
}
inline void TorchLayer::set_has_quantized_conv2d() {
  _oneof_case_[0] = kQuantizedConv2D;
}
inline void TorchLayer::clear_quantized_conv2d() {
  if (_internal_has_quantized_conv2d()) {
    if (GetArena() == nullptr) {
      delete layer_type_.quantized_conv2d_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::QuantizedTorchConv2d* TorchLayer::release_quantized_conv2d() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.quantized_conv2d)
  if (_internal_has_quantized_conv2d()) {
    clear_has_layer_type();
      ::oris_ai::QuantizedTorchConv2d* temp = layer_type_.quantized_conv2d_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.quantized_conv2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::QuantizedTorchConv2d& TorchLayer::_internal_quantized_conv2d() const {
  return _internal_has_quantized_conv2d()
      ? *layer_type_.quantized_conv2d_
      : *reinterpret_cast< ::oris_ai::QuantizedTorchConv2d*>(&::oris_ai::_QuantizedTorchConv2d_default_instance_);
}
inline const ::oris_ai::QuantizedTorchConv2d& TorchLayer::quantized_conv2d() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.quantized_conv2d)
  return _internal_quantized_conv2d();
}
inline ::oris_ai::QuantizedTorchConv2d* TorchLayer::unsafe_arena_release_quantized_conv2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.quantized_conv2d)
  if (_internal_has_quantized_conv2d()) {
    clear_has_layer_type();
    ::oris_ai::QuantizedTorchConv2d* temp = layer_type_.quantized_conv2d_;
    layer_type_.quantized_conv2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_quantized_conv2d(::oris_ai::QuantizedTorchConv2d* quantized_conv2d) {
  clear_layer_type();
  if (quantized_conv2d) {
    set_has_quantized_conv2d();
    layer_type_.quantized_conv2d_ = quantized_conv2d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.quantized_conv2d)
}
inline ::oris_ai::QuantizedTorchConv2d* TorchLayer::_internal_mutable_quantized_conv2d() {
  if (!_internal_has_quantized_conv2d()) {
    clear_layer_type();
    set_has_quantized_conv2d();
    layer_type_.quantized_conv2d_ = CreateMaybeMessage< ::oris_ai::QuantizedTorchConv2d >(GetArena());
  }
  return layer_type_.quantized_conv2d_;
}
inline ::oris_ai::QuantizedTorchConv2d* TorchLayer::mutable_quantized_conv2d() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.quantized_conv2d)
  return _internal_mutable_quantized_conv2d();
}

// .oris_ai.QuantizedTorchActivation quantized_activation = 10;
inline bool TorchLayer::_internal_has_quantized_activation() const {
  return layer_type_case() == kQuantizedActivation;
}
inline bool TorchLayer::has_quantized_activation() const {
  return _internal_has_quantized_activation();
}
inline void TorchLayer::set_has_quantized_activation() {
  _oneof_case_[0] = kQuantizedActivation;
}
inline void TorchLayer::clear_quantized_activation() {
  if (_internal_has_quantized_activation()) {
    if (GetArena() == nullptr) {
      delete layer_type_.quantized_activation_;
    }
    clear_has_layer_type();
  }
}
inline ::oris_ai::QuantizedTorchActivation* TorchLayer::release_quantized_activation() {
  // @@protoc_insertion_point(field_release:oris_ai.TorchLayer.quantized_activation)
  if (_internal_has_quantized_activation()) {
    clear_has_layer_type();
      ::oris_ai::QuantizedTorchActivation* temp = layer_type_.quantized_activation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    layer_type_.quantized_activation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oris_ai::QuantizedTorchActivation& TorchLayer::_internal_quantized_activation() const {
  return _internal_has_quantized_activation()
      ? *layer_type_.quantized_activation_
      : *reinterpret_cast< ::oris_ai::QuantizedTorchActivation*>(&::oris_ai::_QuantizedTorchActivation_default_instance_);
}
inline const ::oris_ai::QuantizedTorchActivation& TorchLayer::quantized_activation() const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchLayer.quantized_activation)
  return _internal_quantized_activation();
}
inline ::oris_ai::QuantizedTorchActivation* TorchLayer::unsafe_arena_release_quantized_activation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:oris_ai.TorchLayer.quantized_activation)
  if (_internal_has_quantized_activation()) {
    clear_has_layer_type();
    ::oris_ai::QuantizedTorchActivation* temp = layer_type_.quantized_activation_;
    layer_type_.quantized_activation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TorchLayer::unsafe_arena_set_allocated_quantized_activation(::oris_ai::QuantizedTorchActivation* quantized_activation) {
  clear_layer_type();
  if (quantized_activation) {
    set_has_quantized_activation();
    layer_type_.quantized_activation_ = quantized_activation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:oris_ai.TorchLayer.quantized_activation)
}
inline ::oris_ai::QuantizedTorchActivation* TorchLayer::_internal_mutable_quantized_activation() {
  if (!_internal_has_quantized_activation()) {
    clear_layer_type();
    set_has_quantized_activation();
    layer_type_.quantized_activation_ = CreateMaybeMessage< ::oris_ai::QuantizedTorchActivation >(GetArena());
  }
  return layer_type_.quantized_activation_;
}
inline ::oris_ai::QuantizedTorchActivation* TorchLayer::mutable_quantized_activation() {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchLayer.quantized_activation)
  return _internal_mutable_quantized_activation();
}

inline bool TorchLayer::has_layer_type() const {
  return layer_type_case() != LAYER_TYPE_NOT_SET;
}
inline void TorchLayer::clear_has_layer_type() {
  _oneof_case_[0] = LAYER_TYPE_NOT_SET;
}
inline TorchLayer::LayerTypeCase TorchLayer::layer_type_case() const {
  return TorchLayer::LayerTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TorchModel

// repeated .oris_ai.TorchLayer layers = 1;
inline int TorchModel::_internal_layers_size() const {
  return layers_.size();
}
inline int TorchModel::layers_size() const {
  return _internal_layers_size();
}
inline void TorchModel::clear_layers() {
  layers_.Clear();
}
inline ::oris_ai::TorchLayer* TorchModel::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:oris_ai.TorchModel.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oris_ai::TorchLayer >*
TorchModel::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:oris_ai.TorchModel.layers)
  return &layers_;
}
inline const ::oris_ai::TorchLayer& TorchModel::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::oris_ai::TorchLayer& TorchModel::layers(int index) const {
  // @@protoc_insertion_point(field_get:oris_ai.TorchModel.layers)
  return _internal_layers(index);
}
inline ::oris_ai::TorchLayer* TorchModel::_internal_add_layers() {
  return layers_.Add();
}
inline ::oris_ai::TorchLayer* TorchModel::add_layers() {
  // @@protoc_insertion_point(field_add:oris_ai.TorchModel.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oris_ai::TorchLayer >&
TorchModel::layers() const {
  // @@protoc_insertion_point(field_list:oris_ai.TorchModel.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oris_ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oris_ai::ActivationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oris_ai::ActivationType>() {
  return ::oris_ai::ActivationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oris_5fai_5fmodel_2eproto
